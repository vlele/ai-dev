
Here are some requirements for the software I am building. PLease understand them and wait for me to ask questions.
**ITAM System Requirements**:
Design and implement an ITAM system using ASP.NET Core, C#, and WebAPI that includes the following features:
- **Asset Inventory**: Maintain a comprehensive inventory of all IT assets.
- **Asset Tracking**: Monitor asset location, status, and usage.
- **Asset Lifecycle Management**: Oversee the entire lifecycle from procurement to disposal.
- **Asset Allocation**: Allocate and track assets across employees or departments.
- **Asset Reporting**: Generate customizable reports on asset metrics.
- **Integration**: Ensure seamless integration with other IT systems.
- **Security**: Implement robust security measures to protect asset data.
- **Scalability**: Design the system to easily adapt to changing IT infrastructure.
- **User Interface**: Create a user-friendly and customizable interface.
- **Accessibility**: Ensure system accessibility on various devices and for users with disabilities.

Generate a mermaid class diagram

2) **Technology Research**:
Investigate ASP.NET Core best practices by reviewing the documentation at [ASP.NET Core Best Practices](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/best-practices?view=aspnetcore-7.0). Additionally, explore Azure best practices at [Azure Well-Architected](https://azure.microsoft.com/en-us/solutions/cloud-enablement/well-architected) to inform the system's architecture and code organization.

3) **Asset Class Implementation**:
Create a C# `Asset` class with properties including `Id`, `Name`, `Status`, `Category`, `Cost`, `UsefulLife`, `SalvageValue`, `PurchaseDate`, `DepreciationAmount`, and `AllocationAmount`.

4) **Hardware Class Implementation**:
Develop a `Hardware` subclass of `Asset` with additional properties such as `SerialNumber`, `Location`, `WarrantyExpirationDate`, `Notes`, `MaintenanceSchedules`, `Warranty`, `RetirementDate`, `RetirementReason`, and `UsageStatistics`.

5) **FundingDetails Class Implementation**:
Construct a `FundingDetails` class that associates an `Asset` with its funding and depreciation information, including `DepreciationStrategy`, `DepreciationRate`, and departmental allocations.

6) **DepreciationStrategy Interface and Implementations**:
Define a `DepreciationStrategy` interface with a method `CalculateDepreciation` that computes the depreciation amount for an asset. Implement this interface in classes `StraightLineDepreciationStrategy`, `DecliningBalanceDepreciationStrategy`, `DoubleDecliningDepreciationStrategy`, and `NoDepreciationStrategy`.

7) **Visitor Pattern Implementation**:
Implement the visitor pattern by creating an `IDepartmentVisitor` interface with a `Visit` method. Also, create a `DepartmentStatisticsVisitor` class that implements this interface and provides methods to retrieve total cost, depreciation, and allocation statistics.

8) **Factory Pattern Implementation**:
Design an `AssetFactory` using the factory pattern to create `Asset` instances. Include logic to handle different asset types and depreciation strategies. Use a `HardwareAssetFactory` for creating hardware assets.

9) **AssetController Class Implementation**:
Develop an `AssetController` class for ASP.NET that uses `AssetFactory` to perform CRUD operations asynchronously.

10) **DbContext Class Implementation**:
Implement a `DbContext` class using Microsoft's EntityFrameworkCore InMemory provider to simulate database operations for the ITAM system.Print code to register the database provider

These improved prompts provide clearer instructions and more structured guidance for the tasks at hand, ensuring a more organized approach to the software development process.